name: Flutter CI/CD

on:
  push:
    branches:
      - development
  pull_request:
    branches:
      - development

permissions:
  contents: write  # Allow release creation & asset upload

jobs:
  build:
    name: Build APK and ZIP
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.0'  # use your version

      - name: Install dependencies
        run: flutter pub get

      - name: Build APK
        run: flutter build apk --release

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: build/app/outputs/flutter-apk/app-release.apk

      - name: Create ZIP package
        run: |
          mkdir release
          cp build/app/outputs/flutter-apk/app-release.apk release/
          zip -r release-package.zip release

      - name: Get version from pubspec.yaml
        id: get_version
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: //' | cut -d "+" -f1)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV  # Save version as an environment variable

      - name: Upload ZIP package
        uses: actions/upload-artifact@v4
        with:
          name: release-package
          path: release-package.zip

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Git configuration
        run: |
          git config --global user.name "Ajinkya Aher"
          git config --global user.email "ajinkya446@gmail.com"

      - name: Get version from pubspec.yaml
        id: get_version
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: //' | cut -d "+" -f1)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV  # Save version as an environment variable

      - name: Create and push tag
        run: |
          git tag -f v${{ env.VERSION }}  # Force create tag
          git push origin -f v${{ env.VERSION }}  # Force push tag to remote

      # Now, create the GitHub release for the tag
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          name: "Release v${{ env.VERSION }}"
          body: |
            ðŸŽ‰ Automated release created for version: `${{ env.VERSION }}`.
            This release contains the built APK and ZIP package.
        env:
          VERSION: ${{ env.VERSION }}
          GITHUB_TOKEN: ${{ secrets.TOKEN }}

      - name: Download APK Artifact
        uses: actions/download-artifact@v4
        with:
          name: release-apk
          path: ./artifacts/  # Download to the ./artifacts directory

      - name: Download ZIP Artifact
        uses: actions/download-artifact@v4
        with:
          name: release-package
          path: ./artifacts/  # Download to the ./artifacts directory

      - name: Upload APK and ZIP to Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}   # REQUIRED here too!
          files: |
            ./artifacts/app-release.apk
            ./artifacts/release-package.zip
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}

